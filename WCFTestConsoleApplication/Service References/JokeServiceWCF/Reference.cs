//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFTestConsoleApplication.JokeServiceWCF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Joke", Namespace="")]
    [System.SerializableAttribute()]
    public partial class Joke : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JokeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JokeTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JokeId {
            get {
                return this.JokeIdField;
            }
            set {
                if ((this.JokeIdField.Equals(value) != true)) {
                    this.JokeIdField = value;
                    this.RaisePropertyChanged("JokeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JokeText {
            get {
                return this.JokeTextField;
            }
            set {
                if ((object.ReferenceEquals(this.JokeTextField, value) != true)) {
                    this.JokeTextField = value;
                    this.RaisePropertyChanged("JokeText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JokeServiceWCF.IJokeServiceWCF")]
    public interface IJokeServiceWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/GetJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/GetJokeResponse")]
        WCFTestConsoleApplication.JokeServiceWCF.Joke GetJoke(int jokeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/GetJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/GetJokeResponse")]
        System.Threading.Tasks.Task<WCFTestConsoleApplication.JokeServiceWCF.Joke> GetJokeAsync(int jokeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/GetAllJokes", ReplyAction="http://tempuri.org/IJokeServiceWCF/GetAllJokesResponse")]
        System.Collections.Generic.List<WCFTestConsoleApplication.JokeServiceWCF.Joke> GetAllJokes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/GetAllJokes", ReplyAction="http://tempuri.org/IJokeServiceWCF/GetAllJokesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFTestConsoleApplication.JokeServiceWCF.Joke>> GetAllJokesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/AddJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/AddJokeResponse")]
        WCFTestConsoleApplication.JokeServiceWCF.Joke AddJoke(WCFTestConsoleApplication.JokeServiceWCF.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/AddJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/AddJokeResponse")]
        System.Threading.Tasks.Task<WCFTestConsoleApplication.JokeServiceWCF.Joke> AddJokeAsync(WCFTestConsoleApplication.JokeServiceWCF.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/UpdateJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/UpdateJokeResponse")]
        void UpdateJoke(WCFTestConsoleApplication.JokeServiceWCF.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/UpdateJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/UpdateJokeResponse")]
        System.Threading.Tasks.Task UpdateJokeAsync(WCFTestConsoleApplication.JokeServiceWCF.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/DeleteJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/DeleteJokeResponse")]
        void DeleteJoke(int jokeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeServiceWCF/DeleteJoke", ReplyAction="http://tempuri.org/IJokeServiceWCF/DeleteJokeResponse")]
        System.Threading.Tasks.Task DeleteJokeAsync(int jokeID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJokeServiceWCFChannel : WCFTestConsoleApplication.JokeServiceWCF.IJokeServiceWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JokeServiceWCFClient : System.ServiceModel.ClientBase<WCFTestConsoleApplication.JokeServiceWCF.IJokeServiceWCF>, WCFTestConsoleApplication.JokeServiceWCF.IJokeServiceWCF {
        
        public JokeServiceWCFClient() {
        }
        
        public JokeServiceWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JokeServiceWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JokeServiceWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JokeServiceWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFTestConsoleApplication.JokeServiceWCF.Joke GetJoke(int jokeID) {
            return base.Channel.GetJoke(jokeID);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsoleApplication.JokeServiceWCF.Joke> GetJokeAsync(int jokeID) {
            return base.Channel.GetJokeAsync(jokeID);
        }
        
        public System.Collections.Generic.List<WCFTestConsoleApplication.JokeServiceWCF.Joke> GetAllJokes() {
            return base.Channel.GetAllJokes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFTestConsoleApplication.JokeServiceWCF.Joke>> GetAllJokesAsync() {
            return base.Channel.GetAllJokesAsync();
        }
        
        public WCFTestConsoleApplication.JokeServiceWCF.Joke AddJoke(WCFTestConsoleApplication.JokeServiceWCF.Joke joke) {
            return base.Channel.AddJoke(joke);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsoleApplication.JokeServiceWCF.Joke> AddJokeAsync(WCFTestConsoleApplication.JokeServiceWCF.Joke joke) {
            return base.Channel.AddJokeAsync(joke);
        }
        
        public void UpdateJoke(WCFTestConsoleApplication.JokeServiceWCF.Joke joke) {
            base.Channel.UpdateJoke(joke);
        }
        
        public System.Threading.Tasks.Task UpdateJokeAsync(WCFTestConsoleApplication.JokeServiceWCF.Joke joke) {
            return base.Channel.UpdateJokeAsync(joke);
        }
        
        public void DeleteJoke(int jokeID) {
            base.Channel.DeleteJoke(jokeID);
        }
        
        public System.Threading.Tasks.Task DeleteJokeAsync(int jokeID) {
            return base.Channel.DeleteJokeAsync(jokeID);
        }
    }
}
